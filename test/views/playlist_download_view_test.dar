import 'package:audio_learn/models/audio.dart';
import 'package:audio_learn/models/playlist.dart';
import 'package:audio_learn/services/settings_data_service.dart';
import 'package:audio_learn/viewmodels/audio_download_vm.dart';
import 'package:audio_learn/viewmodels/audio_player_vm.dart';
import 'package:audio_learn/viewmodels/expandable_playlist_list_vm.dart';
import 'package:audio_learn/viewmodels/warning_message_vm.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:provider/provider.dart';
import 'package:audio_learn/viewmodels/theme_provider.dart';
import 'package:audio_learn/viewmodels/language_provider.dart';
import 'package:audio_learn/main.dart';
import 'package:youtube_explode_dart/src/youtube_explode_base.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

class MockAudioDownloadVM extends ChangeNotifier implements AudioDownloadVM {
  final List<Playlist> _playlistLst = [];

  MockAudioDownloadVM() {
    _playlistLst.add(Playlist(
      url: 'https://mockurl.com',
      title: 'Mock Playlist Title',
      playlistType: PlaylistType.youtube,
      playlistQuality: PlaylistQuality.voice,
    ));
  }

  @override
  Future<void> downloadPlaylistAudios({
    required String playlistUrl,
  }) async {
    List<Audio> audioLst = [
      Audio(
          enclosingPlaylist: _playlistLst[0],
          originalVideoTitle: 'Audio 1',
          videoUrl: 'https://example.com/video2',
          audioDownloadDateTime: DateTime(2023, 3, 25),
          videoUploadDate: DateTime.now(),
          audioDuration: const Duration(minutes: 3, seconds: 42),
          compactVideoDescription: 'Video Description 1'),
      Audio(
          enclosingPlaylist: _playlistLst[0],
          originalVideoTitle: 'Audio 2',
          videoUrl: 'https://example.com/video2',
          audioDownloadDateTime: DateTime(2023, 3, 25),
          videoUploadDate: DateTime.now(),
          audioDuration: const Duration(minutes: 5, seconds: 21),
          compactVideoDescription: 'Video Description 2'),
      Audio(
          enclosingPlaylist: _playlistLst[0],
          originalVideoTitle: 'Audio 3',
          videoUrl: 'https://example.com/video2',
          audioDownloadDateTime: DateTime(2023, 3, 25),
          videoUploadDate: DateTime.now(),
          audioDuration: const Duration(minutes: 2, seconds: 15),
          compactVideoDescription: 'Video Description 3'),
    ];

    int i = 1;
    int speed = 100000;
    int size = 900000;

    for (Audio audio in audioLst) {
      audio.audioDownloadSpeed = speed * i;
      audio.audioFileSize = size * i;
      i++;
    }

    _playlistLst[0].downloadedAudioLst = audioLst;
    _playlistLst[0].playableAudioLst = audioLst;

    notifyListeners();
  }

  @override
  late YoutubeExplode youtubeExplode;

  @override
  Future<Playlist?> addPlaylist({
    String localPlaylistTitle = '',
    String playlistUrl = '',
    required PlaylistQuality playlistQuality,
  }) async {
    return Playlist(
      url: 'https://mockurl.com',
      title: 'Mock Playlist Title',
      playlistType: PlaylistType.youtube,
      playlistQuality: PlaylistQuality.voice,
    );
  }

  @override
  // TODO: implement currentDownloadingAudio
  Audio get currentDownloadingAudio => _playlistLst[0].downloadedAudioLst[0];

  @override
  // TODO: implement downloadProgress
  double get downloadProgress => 0.5;

  @override
  // TODO: implement isDownloading
  bool get isDownloading => false;

  @override
  // TODO: implement isHighQuality
  bool get isHighQuality => false;

  @override
  // TODO: implement lastSecondDownloadSpeed
  int get lastSecondDownloadSpeed => 100000;

  @override
  // TODO: implement listOfPlaylist
  List<Playlist> get listOfPlaylist => _playlistLst;

  @override
  void setAudioQuality({required bool isHighQuality}) {
    // TODO: implement setAudioQuality
  }

  @override
  Future<void> downloadSingleVideoAudio({
    required String videoUrl,
    required Playlist singleVideoPlaylist,
  }) async {
    // TODO: implement downloadSingleVideoAudio
    throw UnimplementedError();
  }

  @override
  void stopDownload() {
    // TODO: implement stopDownload
  }

  @override
  // TODO: implement audioDownloadError
  bool get audioDownloadError => throw UnimplementedError();

  @override
  // TODO: implement isDownloadStopping
  bool get isDownloadStopping => throw UnimplementedError();

  @override
  void updatePlaylistSelection(
      {required String playlistId, required bool isPlaylistSelected}) {
    // TODO: implement updatePlaylistSelection
  }

  @override
  void deleteAudio({required Audio audio}) {
    // TODO: implement deleteAudio
  }

  @override
  void deleteAudioFromPlaylistAswell({required Audio audio}) {
    // TODO: implement deleteAudioFromPlaylistAswell
  }

  @override
  void copyAudioToPlaylist(
      {required Audio audio, required Playlist targetPlaylist}) {
    // TODO: implement copyAudioToPlaylist
  }

  @override
  int getPlaylistJsonFileSize({required Playlist playlist}) {
    // TODO: implement getPlaylistJsonFileSize
    throw UnimplementedError();
  }

  @override
  set isHighQuality(bool isHighQuality) {
    // TODO: implement isHighQuality
  }

  @override
  void moveAudioToPlaylist(
      {required Audio audio, required Playlist targetPlaylist}) {
    // TODO: implement moveAudioToPlaylist
  }

  @override
  Playlist? obtainSingleVideoPlaylist(List<Playlist> selectedPlaylists) {
    // TODO: implement obtainSingleVideoPlaylist
    throw UnimplementedError();
  }

  @override
  void updatePlaylistJsonFiles() {
    // TODO: implement updatePlaylistJsonFiles
  }
}

void main() {
  SettingsDataService appSettings = SettingsDataService();

  group('PlaylistDownloadView mock downloading audios', () {
    late MockAudioDownloadVM mockAudioDownloadVM;

    setUp(() {
      mockAudioDownloadVM = MockAudioDownloadVM();
    });

    testWidgets('displays list of downloaded audios',
        (WidgetTester tester) async {

      SettingsDataService settingsDataService = SettingsDataService();
      WarningMessageVM warningMessageVM = WarningMessageVM();
      ExpandablePlaylistListVM expandablePlaylistListVM =
          ExpandablePlaylistListVM(
        warningMessageVM: warningMessageVM,
        audioDownloadVM: mockAudioDownloadVM,
        settingsDataService: settingsDataService,
      );

      // calling getUpToDateSelectablePlaylists() loads all the
      // playlist json files from the app dir and so enables
      // expandablePlaylistListVM to know which playlists are
      // selected and which are not
      expandablePlaylistListVM.getUpToDateSelectablePlaylists();

      const String youtubePlaylistUrl = '';
      const String localPlaylistTitle = 'audio_learn_local_playlist_test';



      await tester.pumpWidget(
        MultiProvider(
          providers: [
            ChangeNotifierProvider(create: (_) => mockAudioDownloadVM),
            ChangeNotifierProvider(create: (_) => AudioPlayerVM()),
            ChangeNotifierProvider(
                create: (_) => ThemeProvider(
                      appSettings: settingsDataService,
                    )),
            ChangeNotifierProvider(
                create: (_) => LanguageProvider(
                      appSettings: settingsDataService,
                    )),
            ChangeNotifierProvider(create: (_) => expandablePlaylistListVM),
            ChangeNotifierProvider(create: (_) => warningMessageVM),
          ],
          child: Consumer2<ThemeProvider, LanguageProvider>(
              builder: (context, themeProvider, languageProvider, child) {
            return MaterialApp(
              theme: themeProvider.currentTheme == AppTheme.dark
                  ? ThemeData.dark().copyWith(
                      colorScheme: ThemeData.dark().colorScheme.copyWith(
                            background: Colors.black,
                            surface: Colors.black,
                          ),
                      primaryColor: Colors.black,
                      scaffoldBackgroundColor: Colors.black,
                      iconTheme: ThemeData.dark().iconTheme.copyWith(
                            color: Colors
                                .blue.shade700, // Set icon color in dark mode
                          ),
                      elevatedButtonTheme: ElevatedButtonThemeData(
                        style: ElevatedButton.styleFrom(
                          foregroundColor: Colors.white,
                          backgroundColor: Colors.blue
                              .shade700, // Set button text color in dark mode
                        ),
                      ),
                      textTheme: ThemeData.dark().textTheme.copyWith(
                            bodyMedium: ThemeData.dark()
                                .textTheme
                                .bodyMedium!
                                .copyWith(color: Colors.blue.shade700),
                            titleMedium: ThemeData.dark()
                                .textTheme
                                .titleMedium!
                                .copyWith(color: Colors.white),
                          ),
                      checkboxTheme: ThemeData.dark().checkboxTheme.copyWith(
                            checkColor: MaterialStateProperty.all(
                              Colors.blue.shade700, // Set Checkbox check color
                            ),
                            fillColor: MaterialStateProperty.all(
                              Colors.white, // Set Checkbox fill color
                            ),
                          ),
                      inputDecorationTheme: InputDecorationTheme(
                        fillColor: Colors.grey[900],
                        filled: true,
                        border: const OutlineInputBorder(),
                      ),
                      textSelectionTheme: TextSelectionThemeData(
                        cursorColor: Colors.white,
                        selectionColor: Colors.white.withOpacity(0.3),
                        selectionHandleColor: Colors.white.withOpacity(0.5),
                      ),
                    )
                  : ThemeData.light(),
              home: const Scaffold(
                body: MyHomePage(),
              ),
              locale: languageProvider.currentLocale,
              localizationsDelegates: AppLocalizations.localizationsDelegates,
              supportedLocales: AppLocalizations.supportedLocales,
            );
          }),
        ),
      );

      TextField urlTextField =
          tester.widget(find.byKey(const Key('playlistUrlTextField')));
      expect(urlTextField.controller!.text, 'https://mockurl.com');

      // Wait for the audios to be loaded
      await tester.pumpAndSettle();
      await tester.tap(find.byKey(const Key('downLoadButton')));
      await tester.pumpAndSettle();

      // Verify that all the audios are displayed
      expect(find.text('Audio 1'), findsOneWidget);
      expect(find.text('0:03:42. Size 900 Ko. Downloaded at 100 Ko/sec'),
          findsOneWidget);

      expect(find.text('Audio 2'), findsOneWidget);
      expect(find.text('0:05:21. Size 1.80 Mo. Downloaded at 200 Ko/sec'),
          findsOneWidget);

      expect(find.text('Audio 3'), findsOneWidget);
      expect(find.text('0:02:15. Size 2.70 Mo. Downloaded at 300 Ko/sec'),
          findsOneWidget);
    });
  });

  group('PlaylistDownloadView language selection', () {
    testWidgets('Changing language', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: MainApp(
              settingsDataService: SettingsDataService(),
              key: const Key('mainAppKey'),
            ),
          ),
        ),
      );

// Check the initial language
      expect(find.text('Download Audio Youtube'), findsOneWidget);

// Open the language selection popup menu
      await tester.tap(find.byIcon(Icons.more_vert));
      await tester.pumpAndSettle();

// Select the French language option
      await tester.tap(find.text('Select French'));
      await tester.pumpAndSettle();

// Check if the language has changed
      expect(find.text('Télécharger Audio Youtube'), findsOneWidget);

// Open the language selection popup menu again
      await tester.tap(find.byIcon(Icons.more_vert));
      await tester.pumpAndSettle();

// Select the English language option
      await tester.tap(find.text('Affichage anglais'));
      await tester.pumpAndSettle();

// Check if the language has changed back
      expect(find.text('Download Audio Youtube'), findsOneWidget);
    });
  });
}
